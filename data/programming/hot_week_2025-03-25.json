[
  {
    "id": "1jirwz7",
    "title": "Algorithms Every Programmer Should Know",
    "author": "photon_lines",
    "author_fullname": "t2_ia2x9l1l6",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://photonlines.substack.com/p/visual-focused-algorithms-cheat-sheet",
    "permalink": "https://www.reddit.com/r/programming/comments/1jirwz7/algorithms_every_programmer_should_know/",
    "created_utc": 1742826403,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 476,
    "num_comments": 70,
    "upvote_ratio": 0.86,
    "ups": 476,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "photonlines.substack.com",
    "suggested_sort": null
  },
  {
    "id": "1jisdju",
    "title": "TypeScript Migrates to Go: What's Really Behind That 10x Performance Claim?",
    "author": "Adventurous-Salt8514",
    "author_fullname": "t2_96l32j0u",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.architecture-weekly.com/p/typescript-migrates-to-go-whats-really",
    "permalink": "https://www.reddit.com/r/programming/comments/1jisdju/typescript_migrates_to_go_whats_really_behind/",
    "created_utc": 1742827602,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 203,
    "num_comments": 81,
    "upvote_ratio": 0.73,
    "ups": 203,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "architecture-weekly.com",
    "suggested_sort": null
  },
  {
    "id": "1jj16rl",
    "title": "Securing non-human identities",
    "author": "West-Chard-1474",
    "author_fullname": "t2_17yas4vd58",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.cerbos.dev/blog/securing-non-human-identities-understanding-and-addressing-owasp-top-10-threats",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj16rl/securing_nonhuman_identities/",
    "created_utc": 1742848530,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 34,
    "num_comments": 0,
    "upvote_ratio": 0.87,
    "ups": 34,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "cerbos.dev",
    "suggested_sort": null
  },
  {
    "id": "1jisknm",
    "title": "AI’s Hidden Crisis: How Our Obsession With Innovation is Building a House of Cards",
    "author": "TerryC_IndieGameDev",
    "author_fullname": "t2_6n68iiaj",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://medium.com/mr-plan-publication/ais-hidden-crisis-how-our-obsession-with-innovation-is-building-a-house-of-cards-29090b92047a?sk=66fd1a81a4b8f03cee827022055d74bd",
    "permalink": "https://www.reddit.com/r/programming/comments/1jisknm/ais_hidden_crisis_how_our_obsession_with/",
    "created_utc": 1742828103,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 51,
    "num_comments": 7,
    "upvote_ratio": 0.68,
    "ups": 51,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "medium.com",
    "suggested_sort": null
  },
  {
    "id": "1jj3iwn",
    "title": "Evolving Scala, by Martin Odersky and Haoyi Li",
    "author": "sideEffffECt",
    "author_fullname": "t2_8t63o",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.scala-lang.org/blog/2025/03/24/evolving-scala.html",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj3iwn/evolving_scala_by_martin_odersky_and_haoyi_li/",
    "created_utc": 1742854237,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 12,
    "num_comments": 1,
    "upvote_ratio": 0.88,
    "ups": 12,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "scala-lang.org",
    "suggested_sort": null
  },
  {
    "id": "1jjcq4m",
    "title": "It&#x27;s Time to Stop Building KV Databases • Buttondown",
    "author": "lelanthran",
    "author_fullname": "t2_pnmpo0f",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://buttondown.com/jaffray/archive/its-time-to-stop-building-kv-databases/",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjcq4m/itx27s_time_to_stop_building_kv_databases/",
    "created_utc": 1742882573,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 3,
    "num_comments": 0,
    "upvote_ratio": 1,
    "ups": 3,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "buttondown.com",
    "suggested_sort": null
  },
  {
    "id": "1jixt1j",
    "title": "Ledger Implementation in PostgreSQL",
    "author": "pgr0ss",
    "author_fullname": "t2_3uzw1",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://pgrs.net/2025/03/24/pgledger-ledger-implementation-in-postgresql/",
    "permalink": "https://www.reddit.com/r/programming/comments/1jixt1j/ledger_implementation_in_postgresql/",
    "created_utc": 1742840619,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 10,
    "num_comments": 0,
    "upvote_ratio": 0.73,
    "ups": 10,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "pgrs.net",
    "suggested_sort": null,
    "crosspost_parent_list": [
      {
        "approved_at_utc": null,
        "subreddit": {
          "display_name": "PostgreSQL"
        },
        "selftext": "",
        "user_reports": [],
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Ledger Implementation in PostgreSQL",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/PostgreSQL",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1jiwwia",
        "quarantine": false,
        "link_flair_text_color": "dark",
        "upvote_ratio": 0.98,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 44,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "author_fullname": "t2_3uzw1",
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Projects",
        "can_mod_post": false,
        "score": 44,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "default",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": false,
        "mod_note": null,
        "created": 1742838540,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "pgrs.net",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://pgrs.net/2025/03/24/pgledger-ledger-implementation-in-postgresql/",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "e42aeec2-21a6-11ee-9e82-461958c9a646",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_2qvw7",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#dadada",
        "id": "1jiwwia",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": {
          "name": "pgr0ss"
        },
        "discussion_type": null,
        "num_comments": 20,
        "send_replies": true,
        "media": null,
        "contest_mode": false,
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/PostgreSQL/comments/1jiwwia/ledger_implementation_in_postgresql/",
        "stickied": false,
        "url": "https://pgrs.net/2025/03/24/pgledger-ledger-implementation-in-postgresql/",
        "subreddit_subscribers": 56010,
        "created_utc": 1742838540,
        "num_crossposts": 1,
        "mod_reports": [],
        "is_video": false
      }
    ]
  },
  {
    "id": "1jjafm7",
    "title": "Made a super \"rough\" task manager",
    "author": "BraeznLLC",
    "author_fullname": "t2_1g1jaxpdoe",
    "selftext": "Anyone think they could make this look better while keeping with the offline single-hmtl structure?  Just a DIY guy learning and developing. 🫶",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Anyone think they could make this look better while keeping with the offline single-hmtl structure?  Just a DIY guy learning and developing. 🫶</p>\n</div><!-- SC_ON -->",
    "body": "Anyone think they could make this look better while keeping with the offline single-hmtl structure?  Just a DIY guy learning and developing. 🫶",
    "url": "https://drive.google.com/file/d/1vRMsn-F9CuEfyW6xh1GpyQjjROR-vnhA/view?usp=drivesdk",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjafm7/made_a_super_rough_task_manager/",
    "created_utc": 1742873920,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 2,
    "num_comments": 0,
    "upvote_ratio": 0.76,
    "ups": 2,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "drive.google.com",
    "suggested_sort": null
  },
  {
    "id": "1jiu30j",
    "title": "Bulletproof Sessions: Secure, Cookieless Sessions",
    "author": "tudorconstantin",
    "author_fullname": "t2_7b23y",
    "selftext": "As if there weren't enough session handling mechanisms (session id's in each URL, cookies, http only cookies, JWT tokens in the request header), let me introduce you a novel one: **having a service worker that intercepts and cryptographically signs all the requests to the origin**.  \n  \nWith the traditional session handling mechanisms, we have a static piece of information, usually generated on the server, which gets sent back to the server with each request.  \n  \nWith the bulletproof sessions concept, **the information sent back to the server is dynamic and can not be replayed or faked by an attacker**.  \n",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>As if there weren&#39;t enough session handling mechanisms (session id&#39;s in each URL, cookies, http only cookies, JWT tokens in the request header), let me introduce you a novel one: <strong>having a service worker that intercepts and cryptographically signs all the requests to the origin</strong>.  </p>\n\n<p>With the traditional session handling mechanisms, we have a static piece of information, usually generated on the server, which gets sent back to the server with each request.  </p>\n\n<p>With the bulletproof sessions concept, <strong>the information sent back to the server is dynamic and can not be replayed or faked by an attacker</strong>.  </p>\n</div><!-- SC_ON -->",
    "body": "As if there weren't enough session handling mechanisms (session id's in each URL, cookies, http only cookies, JWT tokens in the request header), let me introduce you a novel one: **having a service worker that intercepts and cryptographically signs all the requests to the origin**.  \n  \nWith the traditional session handling mechanisms, we have a static piece of information, usually generated on the server, which gets sent back to the server with each request.  \n  \nWith the bulletproof sessions concept, **the information sent back to the server is dynamic and can not be replayed or faked by an attacker**.  \n",
    "url": "https://github.com/tudorconstantin/bulletproof-sessions",
    "permalink": "https://www.reddit.com/r/programming/comments/1jiu30j/bulletproof_sessions_secure_cookieless_sessions/",
    "created_utc": 1742831813,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 16,
    "num_comments": 4,
    "upvote_ratio": 0.8,
    "ups": 16,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jjd35o",
    "title": "Developer’s Guide to Choosing the Right Deployment Tool (2025)",
    "author": "CommunicationTop7620",
    "author_fullname": "t2_xgxp251cw",
    "selftext": "Deployment in 2025 is complex, and the right tool is crucial for sanity. We covered key considerations like scalability, team expertise, and security, and broke down tool types: SaaS like DeployHQ, traditional like Jenkins, cloud-native options, PaaS platforms, and various CI/CD solutions. Best practices involve thorough planning and testing, while common pitfalls include chasing trends and ignoring long-term costs. So, with all these options, what are you guys actually using nowadays?",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Deployment in 2025 is complex, and the right tool is crucial for sanity. We covered key considerations like scalability, team expertise, and security, and broke down tool types: SaaS like DeployHQ, traditional like Jenkins, cloud-native options, PaaS platforms, and various CI/CD solutions. Best practices involve thorough planning and testing, while common pitfalls include chasing trends and ignoring long-term costs. So, with all these options, what are you guys actually using nowadays?</p>\n</div><!-- SC_ON -->",
    "body": "Deployment in 2025 is complex, and the right tool is crucial for sanity. We covered key considerations like scalability, team expertise, and security, and broke down tool types: SaaS like DeployHQ, traditional like Jenkins, cloud-native options, PaaS platforms, and various CI/CD solutions. Best practices involve thorough planning and testing, while common pitfalls include chasing trends and ignoring long-term costs. So, with all these options, what are you guys actually using nowadays?",
    "url": "https://www.deployhq.com/blog/how-to-choose-right-deployment-tool-guide",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjd35o/developers_guide_to_choosing_the_right_deployment/",
    "created_utc": 1742884180,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 1,
    "num_comments": 0,
    "upvote_ratio": 1,
    "ups": 1,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "deployhq.com",
    "suggested_sort": null
  },
  {
    "id": "1jj82i8",
    "title": "We built a decentralized protocol for AI identity - Second Me is now open source",
    "author": "DontPlayMeLikeAFool",
    "author_fullname": "t2_1dgzvlm5ir",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://github.com/Mindverse/Second-Me",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj82i8/we_built_a_decentralized_protocol_for_ai_identity/",
    "created_utc": 1742866497,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 3,
    "num_comments": 1,
    "upvote_ratio": 0.56,
    "ups": 3,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jjbtzk",
    "title": "GraphQL API in Node.js",
    "author": "bossar2000",
    "author_fullname": "t2_k1l13w1o",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://ahmedrazadev.hashnode.dev/graphql-api-in-nodejs",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjbtzk/graphql_api_in_nodejs/",
    "created_utc": 1742878894,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 2,
    "upvote_ratio": 0.4,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "ahmedrazadev.hashnode.dev",
    "suggested_sort": null
  },
  {
    "id": "1jieswc",
    "title": "Minecraft clone showcasing the SDL3 GPU API",
    "author": "jaan_soulier",
    "author_fullname": "t2_1jhcohxnz2",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://github.com/jsoulier/blocks",
    "permalink": "https://www.reddit.com/r/programming/comments/1jieswc/minecraft_clone_showcasing_the_sdl3_gpu_api/",
    "created_utc": 1742777864,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 170,
    "num_comments": 43,
    "upvote_ratio": 0.92,
    "ups": 170,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jjbnji",
    "title": "Networking for Web Developers: How the Internet Works",
    "author": "themsaid",
    "author_fullname": "t2_nc352",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://themsaid.com/networking-for-web-developers-how-the-internet-works",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjbnji/networking_for_web_developers_how_the_internet/",
    "created_utc": 1742878202,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 1,
    "num_comments": 0,
    "upvote_ratio": 0.6,
    "ups": 1,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "themsaid.com",
    "suggested_sort": null
  },
  {
    "id": "1jit6i6",
    "title": "The design and impact of building a simple key-value database in my programming language",
    "author": "yorickpeterse",
    "author_fullname": "t2_6a2w3",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://yorickpeterse.com/articles/the-design-and-impact-of-building-a-simple-key-value-database-in-inko/",
    "permalink": "https://www.reddit.com/r/programming/comments/1jit6i6/the_design_and_impact_of_building_a_simple/",
    "created_utc": 1742829579,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 9,
    "num_comments": 1,
    "upvote_ratio": 0.77,
    "ups": 9,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "yorickpeterse.com",
    "suggested_sort": null
  },
  {
    "id": "1jitgfv",
    "title": "Par language, a lot of new stuff! Type system, language reference, interaction combinator runtime",
    "author": "faiface",
    "author_fullname": "t2_jw23d",
    "selftext": "Hello, everyone!\n\n[Two months ago](https://www.reddit.com/r/programming/comments/1if9r5l/par_an_experimental_concurrent_language_with_an/), I posted here about a new programming language I was developing, called **Par**.\n\n**Check out the brand new README at:** https://github.com/faiface/par-lang\n\n**It's an _expressive, concurrent, and total\\*_ language with linear types and duality.** It's an attempt to bring the expressive power of linear logic into practice.\n\n_Scroll below for more details on the language._\n\n**A lot has happened since!**\n\nI was fortunate to attract the attention of some highly talented and motivated contributors, who have helped me push this project further than I ever could've on my own.\n\nHere's some things that happened in the meanwhile:\n- **A type system,** fully isomorphic to linear logic (with fix-points), recursive and co-recursive types, universally and existentially quantified generics. This one is by me.\n- [**A comprehensive language reference,**](https://faiface.github.io/par-lang/introduction.html) put together by [@FauxKiwi](https://github.com/s15n), an excellent read into all of the current features of Par.\n- **An interaction combinator compiler and runtime,** by [@FranchuFranchu](https://github.com/FranchuFranchu) and [@Noam Y](https://github.com/NoamDev). It's a performant way of doing highly parallel, and distributed computation, that just happens to fit this language perfectly. It's also used by the famous [HVM](https://github.com/HigherOrderCO/HVM) and the [Bend](https://github.com/HigherOrderCO/Bend) programming language. We're very close to merging it.\n- **A new parser with good syntax error messages,** by [@Easyoakland](https://github.com/Easyoakland).\n\n**There's still a lot to be done!** Next time I'll be posting like this, I expect we'll also have:\n- Strings and numbers\n- Replicable types\n- Extensible Rust-controlled I/O\n\n**Join us on [Discord](https://discord.gg/8KsypefW99)!**\n\n_For those who are lazy to click on the GitHub link:_\n\n# ✨ Features\n\n## 🧩 Expressive\n\n**Duality** gives two sides to every concept, leading to rich composability. Whichever angle you take to\ntackle a problem, there will likely be ways to express it.\n**Par comes with these first-class, structural types:**\n\n_(Dual types are on the same line.)_\n\n- [**Pairs**](https://faiface.github.io/par-lang/types.html#pair-types) (easily extensible to tuples), and [**functions**](https://faiface.github.io/par-lang/types.html#function-types) (naturally curried).\n- [**Eithers**](https://faiface.github.io/par-lang/types.html#either-types) (sum types), and [**choices**](https://faiface.github.io/par-lang/types.html#choice-types) (unusual, but powerful dispatchers).\n- [**Recursive**](https://faiface.github.io/par-lang/types.html#recursive-types) (finite), and [**iterative**](https://faiface.github.io/par-lang/types.html#iterative-types) (co-recursive, potentially infinite) types, with totality checking.\n- [**Universally,**](https://faiface.github.io/par-lang/types.html#universal-types) and [**existentially**](https://faiface.github.io/par-lang/types.html#existential-types) quantified generic functions and values.\n- [**Unit,**](https://faiface.github.io/par-lang/types.html#the-unit-type) and [**continuation.**](https://faiface.github.io/par-lang/types.html#the-bottom-type)\n\nThese **orthogonal concepts** combine to give rise to a rich world of types and semantics.\n\nSome features that require special syntax in other languages fall naturally out of the basic building\nblocks above. For example, constructing a list using the _generator syntax_, like `yield` in Python,\nis possible by operating on the _dual_ of a list:\n\n```\ndec reverse : [type T] [List<T>] List<T>\n\n// We construct the reversed list by destructing its dual: `chan List<T>`.\ndef reverse = [type T] [list] chan yield {\n  let yield: chan List<T> = list begin {\n    .empty!       => yield,          // The list is empty, give back the generator handle.\n    .item(x) rest => do {            // The list starts with an item `x`.\n      let yield = rest loop          // Traverse into the rest of the list first.\n      yield.item(x)                  // After that, produce `x` on the reversed list.\n    } in yield                       // Finally, give back the generator handle.\n  }\n  yield.empty!                       // At the very end, signal the end of the list.\n}\n```\n\n## 🔗 Concurrent\n\n**Automatically parallel execution.** Everything that can run in parallel, runs in parallel. Thanks to its\nsemantics based on linear logic, Par programs are easily executed in parallel. Sequential execution is only\nenforced by data dependencies.\n\nPar even compiles to [interaction combinators](https://core.ac.uk/download/pdf/81113716.pdf), which is the\nbasis for the famous [HVM](https://github.com/HigherOrderCO/HVM), and the\n[Bend](https://github.com/HigherOrderCO/Bend) programming language.\n\n**Structured concurrency with session types.** Session types describe concurrent protocols, almost like\nfinite-state machines, and make sure these are upheld in code. Par needs no special library for these.\nLinear types _are_ session types, at least in their full version, which embraces duality.\n\nThis (session) type fully describes the behavior of a player of rock-paper-scissors:\n\n```\ntype Player = iterative :game {\n  .stop => !                         // Games are over.\n  .play_round => iterative :round {  // Start a new round.\n    .stop_round => self :game,       // End current round prematurely.\n    .play_move => (Move) {           // Pick your next move.\n      .win  => self :game,           // You won! The round is over.\n      .lose => self :game,           // You lost! The round is over.\n      .draw => self :round,          // It's a draw. The round goes on.\n    }\n  }\n}\n```\n\n## 🛡️ Total*\n\n**No crashes.** Runtime exceptions are not supported, except for running out of memory.\n\n**No deadlocks.** Structured concurrency of Par makes deadlocks impossible.\n\n**(Almost) no infinite loops.\\*** By default, recursion using `begin`/`loop` is checked for well-foundedness.\n\n**Iterative (corecursive) types** are distinguished from **recursive types**, and enable constructing\npotentially unbounded objects, such as infinite sequences, with no danger of infinite loops, or a need\nto opt-out of totality.\n\n```\n// An iterative type. Constructed by `begin`/`loop`, and destructed step-by-step.\ntype Stream<T> = iterative {\n  close => !                         // Close this stream, and destroy its internal resources.\n  next => (T) self                   // Produce an item, then ask me what I want next.\n}\n\n// An infinite sequence of `.true!` values.\ndef forever_true: Stream<either { .true!, .false! }> = begin {\n  close => !                         // No resources to destroy, we just end.\n  next => (.true!) loop              // We produce a `.true!`, and repeat the protocol.\n}\n```\n\n_\\*There is an escape hatch. Some algorithms, especially divide-and-conquer, are difficult or impossible\nto implement using easy-to-check well-founded strategies. For those, `unfounded begin` turns this check\noff. Vast majority of code doesn't need to opt-out of totality checking, it naturaly fits its requirements.\nThose few parts that need to opt-out are clearly marked with `unfounded`. They are the only places\nthat can potentially cause infinite loops._\n\n## 📚 Theoretical background\n\nPar is fully based on [linear logic](https://plato.stanford.edu/entries/logic-linear/). It's an attempt to\nbring its expressive power into practice, by interpreting linear logic as _session types_.\n\nIn fact, the language itself is based on a little process language, called _CP_, from a paper called\n[_\"Propositions as Sessions\"_](https://www.pure.ed.ac.uk/ws/portalfiles/portal/18383989/Wadler_2012_Propositions_as_Sessions.pdf)\nby the famous Phil Wadler.\n\nWhile programming in Par feels just like a programming language, even if an unusual one, its programs\nstill correspond one-to-one with linear logic proofs.\n\n## 📝 To Do\n\n**Par is a fresh project in early stages of development.** While the foundations, including some apparently\nadvanced features, are designed and implemented, some basic features are still missing.\n\n**Basic missing features:**\n\n- Strings and numbers\n- Replicable data types (automatically copied and dropped)\n- External I/O implementation\n\nThere are also some **advanced missing features:**\n\n- Non-determinism\n- Traits / type classes",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hello, everyone!</p>\n\n<p><a href=\"https://www.reddit.com/r/programming/comments/1if9r5l/par_an_experimental_concurrent_language_with_an/\">Two months ago</a>, I posted here about a new programming language I was developing, called <strong>Par</strong>.</p>\n\n<p><strong>Check out the brand new README at:</strong> <a href=\"https://github.com/faiface/par-lang\">https://github.com/faiface/par-lang</a></p>\n\n<p><strong>It&#39;s an <em>expressive, concurrent, and total*</em> language with linear types and duality.</strong> It&#39;s an attempt to bring the expressive power of linear logic into practice.</p>\n\n<p><em>Scroll below for more details on the language.</em></p>\n\n<p><strong>A lot has happened since!</strong></p>\n\n<p>I was fortunate to attract the attention of some highly talented and motivated contributors, who have helped me push this project further than I ever could&#39;ve on my own.</p>\n\n<p>Here&#39;s some things that happened in the meanwhile:\n- <strong>A type system,</strong> fully isomorphic to linear logic (with fix-points), recursive and co-recursive types, universally and existentially quantified generics. This one is by me.\n- <a href=\"https://faiface.github.io/par-lang/introduction.html\"><strong>A comprehensive language reference,</strong></a> put together by <a href=\"https://github.com/s15n\">@FauxKiwi</a>, an excellent read into all of the current features of Par.\n- <strong>An interaction combinator compiler and runtime,</strong> by <a href=\"https://github.com/FranchuFranchu\">@FranchuFranchu</a> and <a href=\"https://github.com/NoamDev\">@Noam Y</a>. It&#39;s a performant way of doing highly parallel, and distributed computation, that just happens to fit this language perfectly. It&#39;s also used by the famous <a href=\"https://github.com/HigherOrderCO/HVM\">HVM</a> and the <a href=\"https://github.com/HigherOrderCO/Bend\">Bend</a> programming language. We&#39;re very close to merging it.\n- <strong>A new parser with good syntax error messages,</strong> by <a href=\"https://github.com/Easyoakland\">@Easyoakland</a>.</p>\n\n<p><strong>There&#39;s still a lot to be done!</strong> Next time I&#39;ll be posting like this, I expect we&#39;ll also have:\n- Strings and numbers\n- Replicable types\n- Extensible Rust-controlled I/O</p>\n\n<p><strong>Join us on <a href=\"https://discord.gg/8KsypefW99\">Discord</a>!</strong></p>\n\n<p><em>For those who are lazy to click on the GitHub link:</em></p>\n\n<h1>✨ Features</h1>\n\n<h2>🧩 Expressive</h2>\n\n<p><strong>Duality</strong> gives two sides to every concept, leading to rich composability. Whichever angle you take to\ntackle a problem, there will likely be ways to express it.\n<strong>Par comes with these first-class, structural types:</strong></p>\n\n<p><em>(Dual types are on the same line.)</em></p>\n\n<ul>\n<li><a href=\"https://faiface.github.io/par-lang/types.html#pair-types\"><strong>Pairs</strong></a> (easily extensible to tuples), and <a href=\"https://faiface.github.io/par-lang/types.html#function-types\"><strong>functions</strong></a> (naturally curried).</li>\n<li><a href=\"https://faiface.github.io/par-lang/types.html#either-types\"><strong>Eithers</strong></a> (sum types), and <a href=\"https://faiface.github.io/par-lang/types.html#choice-types\"><strong>choices</strong></a> (unusual, but powerful dispatchers).</li>\n<li><a href=\"https://faiface.github.io/par-lang/types.html#recursive-types\"><strong>Recursive</strong></a> (finite), and <a href=\"https://faiface.github.io/par-lang/types.html#iterative-types\"><strong>iterative</strong></a> (co-recursive, potentially infinite) types, with totality checking.</li>\n<li><a href=\"https://faiface.github.io/par-lang/types.html#universal-types\"><strong>Universally,</strong></a> and <a href=\"https://faiface.github.io/par-lang/types.html#existential-types\"><strong>existentially</strong></a> quantified generic functions and values.</li>\n<li><a href=\"https://faiface.github.io/par-lang/types.html#the-unit-type\"><strong>Unit,</strong></a> and <a href=\"https://faiface.github.io/par-lang/types.html#the-bottom-type\"><strong>continuation.</strong></a></li>\n</ul>\n\n<p>These <strong>orthogonal concepts</strong> combine to give rise to a rich world of types and semantics.</p>\n\n<p>Some features that require special syntax in other languages fall naturally out of the basic building\nblocks above. For example, constructing a list using the <em>generator syntax</em>, like <code>yield</code> in Python,\nis possible by operating on the <em>dual</em> of a list:</p>\n\n<p>```\ndec reverse : [type T] [List&lt;T&gt;] List&lt;T&gt;</p>\n\n<p>// We construct the reversed list by destructing its dual: <code>chan List&lt;T&gt;</code>.\ndef reverse = [type T] [list] chan yield {\n  let yield: chan List&lt;T&gt; = list begin {\n    .empty!       =&gt; yield,          // The list is empty, give back the generator handle.\n    .item(x) rest =&gt; do {            // The list starts with an item <code>x</code>.\n      let yield = rest loop          // Traverse into the rest of the list first.\n      yield.item(x)                  // After that, produce <code>x</code> on the reversed list.\n    } in yield                       // Finally, give back the generator handle.\n  }\n  yield.empty!                       // At the very end, signal the end of the list.\n}\n```</p>\n\n<h2>🔗 Concurrent</h2>\n\n<p><strong>Automatically parallel execution.</strong> Everything that can run in parallel, runs in parallel. Thanks to its\nsemantics based on linear logic, Par programs are easily executed in parallel. Sequential execution is only\nenforced by data dependencies.</p>\n\n<p>Par even compiles to <a href=\"https://core.ac.uk/download/pdf/81113716.pdf\">interaction combinators</a>, which is the\nbasis for the famous <a href=\"https://github.com/HigherOrderCO/HVM\">HVM</a>, and the\n<a href=\"https://github.com/HigherOrderCO/Bend\">Bend</a> programming language.</p>\n\n<p><strong>Structured concurrency with session types.</strong> Session types describe concurrent protocols, almost like\nfinite-state machines, and make sure these are upheld in code. Par needs no special library for these.\nLinear types <em>are</em> session types, at least in their full version, which embraces duality.</p>\n\n<p>This (session) type fully describes the behavior of a player of rock-paper-scissors:</p>\n\n<p><code>\ntype Player = iterative :game {\n  .stop =&gt; !                         // Games are over.\n  .play_round =&gt; iterative :round {  // Start a new round.\n    .stop_round =&gt; self :game,       // End current round prematurely.\n    .play_move =&gt; (Move) {           // Pick your next move.\n      .win  =&gt; self :game,           // You won! The round is over.\n      .lose =&gt; self :game,           // You lost! The round is over.\n      .draw =&gt; self :round,          // It&#39;s a draw. The round goes on.\n    }\n  }\n}\n</code></p>\n\n<h2>🛡️ Total*</h2>\n\n<p><strong>No crashes.</strong> Runtime exceptions are not supported, except for running out of memory.</p>\n\n<p><strong>No deadlocks.</strong> Structured concurrency of Par makes deadlocks impossible.</p>\n\n<p><strong>(Almost) no infinite loops.\\</strong>* By default, recursion using <code>begin</code>/<code>loop</code> is checked for well-foundedness.</p>\n\n<p><strong>Iterative (corecursive) types</strong> are distinguished from <strong>recursive types</strong>, and enable constructing\npotentially unbounded objects, such as infinite sequences, with no danger of infinite loops, or a need\nto opt-out of totality.</p>\n\n<p>``<code>\n// An iterative type. Constructed by</code>begin<code>/</code>loop`, and destructed step-by-step.\ntype Stream&lt;T&gt; = iterative {\n  close =&gt; !                         // Close this stream, and destroy its internal resources.\n  next =&gt; (T) self                   // Produce an item, then ask me what I want next.\n}</p>\n\n<p>// An infinite sequence of <code>.true!</code> values.\ndef forever_true: Stream&lt;either { .true!, .false! }&gt; = begin {\n  close =&gt; !                         // No resources to destroy, we just end.\n  next =&gt; (.true!) loop              // We produce a <code>.true!</code>, and repeat the protocol.\n}\n```</p>\n\n<p><em>*There is an escape hatch. Some algorithms, especially divide-and-conquer, are difficult or impossible\nto implement using easy-to-check well-founded strategies. For those, <code>unfounded begin</code> turns this check\noff. Vast majority of code doesn&#39;t need to opt-out of totality checking, it naturaly fits its requirements.\nThose few parts that need to opt-out are clearly marked with <code>unfounded</code>. They are the only places\nthat can potentially cause infinite loops.</em></p>\n\n<h2>📚 Theoretical background</h2>\n\n<p>Par is fully based on <a href=\"https://plato.stanford.edu/entries/logic-linear/\">linear logic</a>. It&#39;s an attempt to\nbring its expressive power into practice, by interpreting linear logic as <em>session types</em>.</p>\n\n<p>In fact, the language itself is based on a little process language, called <em>CP</em>, from a paper called\n<a href=\"https://www.pure.ed.ac.uk/ws/portalfiles/portal/18383989/Wadler_2012_Propositions_as_Sessions.pdf\"><em>&quot;Propositions as Sessions&quot;</em></a>\nby the famous Phil Wadler.</p>\n\n<p>While programming in Par feels just like a programming language, even if an unusual one, its programs\nstill correspond one-to-one with linear logic proofs.</p>\n\n<h2>📝 To Do</h2>\n\n<p><strong>Par is a fresh project in early stages of development.</strong> While the foundations, including some apparently\nadvanced features, are designed and implemented, some basic features are still missing.</p>\n\n<p><strong>Basic missing features:</strong></p>\n\n<ul>\n<li>Strings and numbers</li>\n<li>Replicable data types (automatically copied and dropped)</li>\n<li>External I/O implementation</li>\n</ul>\n\n<p>There are also some <strong>advanced missing features:</strong></p>\n\n<ul>\n<li>Non-determinism</li>\n<li>Traits / type classes</li>\n</ul>\n</div><!-- SC_ON -->",
    "body": "Hello, everyone!\n\n[Two months ago](https://www.reddit.com/r/programming/comments/1if9r5l/par_an_experimental_concurrent_language_with_an/), I posted here about a new programming language I was developing, called **Par**.\n\n**Check out the brand new README at:** https://github.com/faiface/par-lang\n\n**It's an _expressive, concurrent, and total\\*_ language with linear types and duality.** It's an attempt to bring the expressive power of linear logic into practice.\n\n_Scroll below for more details on the language._\n\n**A lot has happened since!**\n\nI was fortunate to attract the attention of some highly talented and motivated contributors, who have helped me push this project further than I ever could've on my own.\n\nHere's some things that happened in the meanwhile:\n- **A type system,** fully isomorphic to linear logic (with fix-points), recursive and co-recursive types, universally and existentially quantified generics. This one is by me.\n- [**A comprehensive language reference,**](https://faiface.github.io/par-lang/introduction.html) put together by [@FauxKiwi](https://github.com/s15n), an excellent read into all of the current features of Par.\n- **An interaction combinator compiler and runtime,** by [@FranchuFranchu](https://github.com/FranchuFranchu) and [@Noam Y](https://github.com/NoamDev). It's a performant way of doing highly parallel, and distributed computation, that just happens to fit this language perfectly. It's also used by the famous [HVM](https://github.com/HigherOrderCO/HVM) and the [Bend](https://github.com/HigherOrderCO/Bend) programming language. We're very close to merging it.\n- **A new parser with good syntax error messages,** by [@Easyoakland](https://github.com/Easyoakland).\n\n**There's still a lot to be done!** Next time I'll be posting like this, I expect we'll also have:\n- Strings and numbers\n- Replicable types\n- Extensible Rust-controlled I/O\n\n**Join us on [Discord](https://discord.gg/8KsypefW99)!**\n\n_For those who are lazy to click on the GitHub link:_\n\n# ✨ Features\n\n## 🧩 Expressive\n\n**Duality** gives two sides to every concept, leading to rich composability. Whichever angle you take to\ntackle a problem, there will likely be ways to express it.\n**Par comes with these first-class, structural types:**\n\n_(Dual types are on the same line.)_\n\n- [**Pairs**](https://faiface.github.io/par-lang/types.html#pair-types) (easily extensible to tuples), and [**functions**](https://faiface.github.io/par-lang/types.html#function-types) (naturally curried).\n- [**Eithers**](https://faiface.github.io/par-lang/types.html#either-types) (sum types), and [**choices**](https://faiface.github.io/par-lang/types.html#choice-types) (unusual, but powerful dispatchers).\n- [**Recursive**](https://faiface.github.io/par-lang/types.html#recursive-types) (finite), and [**iterative**](https://faiface.github.io/par-lang/types.html#iterative-types) (co-recursive, potentially infinite) types, with totality checking.\n- [**Universally,**](https://faiface.github.io/par-lang/types.html#universal-types) and [**existentially**](https://faiface.github.io/par-lang/types.html#existential-types) quantified generic functions and values.\n- [**Unit,**](https://faiface.github.io/par-lang/types.html#the-unit-type) and [**continuation.**](https://faiface.github.io/par-lang/types.html#the-bottom-type)\n\nThese **orthogonal concepts** combine to give rise to a rich world of types and semantics.\n\nSome features that require special syntax in other languages fall naturally out of the basic building\nblocks above. For example, constructing a list using the _generator syntax_, like `yield` in Python,\nis possible by operating on the _dual_ of a list:\n\n```\ndec reverse : [type T] [List<T>] List<T>\n\n// We construct the reversed list by destructing its dual: `chan List<T>`.\ndef reverse = [type T] [list] chan yield {\n  let yield: chan List<T> = list begin {\n    .empty!       => yield,          // The list is empty, give back the generator handle.\n    .item(x) rest => do {            // The list starts with an item `x`.\n      let yield = rest loop          // Traverse into the rest of the list first.\n      yield.item(x)                  // After that, produce `x` on the reversed list.\n    } in yield                       // Finally, give back the generator handle.\n  }\n  yield.empty!                       // At the very end, signal the end of the list.\n}\n```\n\n## 🔗 Concurrent\n\n**Automatically parallel execution.** Everything that can run in parallel, runs in parallel. Thanks to its\nsemantics based on linear logic, Par programs are easily executed in parallel. Sequential execution is only\nenforced by data dependencies.\n\nPar even compiles to [interaction combinators](https://core.ac.uk/download/pdf/81113716.pdf), which is the\nbasis for the famous [HVM](https://github.com/HigherOrderCO/HVM), and the\n[Bend](https://github.com/HigherOrderCO/Bend) programming language.\n\n**Structured concurrency with session types.** Session types describe concurrent protocols, almost like\nfinite-state machines, and make sure these are upheld in code. Par needs no special library for these.\nLinear types _are_ session types, at least in their full version, which embraces duality.\n\nThis (session) type fully describes the behavior of a player of rock-paper-scissors:\n\n```\ntype Player = iterative :game {\n  .stop => !                         // Games are over.\n  .play_round => iterative :round {  // Start a new round.\n    .stop_round => self :game,       // End current round prematurely.\n    .play_move => (Move) {           // Pick your next move.\n      .win  => self :game,           // You won! The round is over.\n      .lose => self :game,           // You lost! The round is over.\n      .draw => self :round,          // It's a draw. The round goes on.\n    }\n  }\n}\n```\n\n## 🛡️ Total*\n\n**No crashes.** Runtime exceptions are not supported, except for running out of memory.\n\n**No deadlocks.** Structured concurrency of Par makes deadlocks impossible.\n\n**(Almost) no infinite loops.\\*** By default, recursion using `begin`/`loop` is checked for well-foundedness.\n\n**Iterative (corecursive) types** are distinguished from **recursive types**, and enable constructing\npotentially unbounded objects, such as infinite sequences, with no danger of infinite loops, or a need\nto opt-out of totality.\n\n```\n// An iterative type. Constructed by `begin`/`loop`, and destructed step-by-step.\ntype Stream<T> = iterative {\n  close => !                         // Close this stream, and destroy its internal resources.\n  next => (T) self                   // Produce an item, then ask me what I want next.\n}\n\n// An infinite sequence of `.true!` values.\ndef forever_true: Stream<either { .true!, .false! }> = begin {\n  close => !                         // No resources to destroy, we just end.\n  next => (.true!) loop              // We produce a `.true!`, and repeat the protocol.\n}\n```\n\n_\\*There is an escape hatch. Some algorithms, especially divide-and-conquer, are difficult or impossible\nto implement using easy-to-check well-founded strategies. For those, `unfounded begin` turns this check\noff. Vast majority of code doesn't need to opt-out of totality checking, it naturaly fits its requirements.\nThose few parts that need to opt-out are clearly marked with `unfounded`. They are the only places\nthat can potentially cause infinite loops._\n\n## 📚 Theoretical background\n\nPar is fully based on [linear logic](https://plato.stanford.edu/entries/logic-linear/). It's an attempt to\nbring its expressive power into practice, by interpreting linear logic as _session types_.\n\nIn fact, the language itself is based on a little process language, called _CP_, from a paper called\n[_\"Propositions as Sessions\"_](https://www.pure.ed.ac.uk/ws/portalfiles/portal/18383989/Wadler_2012_Propositions_as_Sessions.pdf)\nby the famous Phil Wadler.\n\nWhile programming in Par feels just like a programming language, even if an unusual one, its programs\nstill correspond one-to-one with linear logic proofs.\n\n## 📝 To Do\n\n**Par is a fresh project in early stages of development.** While the foundations, including some apparently\nadvanced features, are designed and implemented, some basic features are still missing.\n\n**Basic missing features:**\n\n- Strings and numbers\n- Replicable data types (automatically copied and dropped)\n- External I/O implementation\n\nThere are also some **advanced missing features:**\n\n- Non-determinism\n- Traits / type classes",
    "url": "https://github.com/faiface/par-lang",
    "permalink": "https://www.reddit.com/r/programming/comments/1jitgfv/par_language_a_lot_of_new_stuff_type_system/",
    "created_utc": 1742830267,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 9,
    "num_comments": 0,
    "upvote_ratio": 0.82,
    "ups": 9,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jip5ue",
    "title": "How to handle working software",
    "author": "mixteenth",
    "author_fullname": "t2_8otysi6h",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://badsoftwareadvice.substack.com/p/how-to-handle-working-software",
    "permalink": "https://www.reddit.com/r/programming/comments/1jip5ue/how_to_handle_working_software/",
    "created_utc": 1742818329,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 14,
    "num_comments": 4,
    "upvote_ratio": 0.7,
    "ups": 14,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "badsoftwareadvice.substack.com",
    "suggested_sort": null
  },
  {
    "id": "1jipkcy",
    "title": "GitHub - usertour/usertour: Usertour is an open-source user onboarding platform designed for developers. It allows you to create in-app product tours, checklists, and launchers in minutes—effortlessly and with full control.The open-source alternative to Userflow and Appcues",
    "author": "Crafty_Impression_37",
    "author_fullname": "t2_l42xf1wd",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://github.com/usertour/usertour",
    "permalink": "https://www.reddit.com/r/programming/comments/1jipkcy/github_usertourusertour_usertour_is_an_opensource/",
    "created_utc": 1742819629,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 12,
    "num_comments": 2,
    "upvote_ratio": 0.74,
    "ups": 12,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jil5uw",
    "title": "What's the use of Archimate anyway",
    "author": "GeneralZiltoid",
    "author_fullname": "t2_fhnk9",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://frederickvanbrabant.com/blog/2025-3-21-whats-the-use-of-archimate-anyway/?utm_source=RP",
    "permalink": "https://www.reddit.com/r/programming/comments/1jil5uw/whats_the_use_of_archimate_anyway/",
    "created_utc": 1742801238,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 26,
    "num_comments": 4,
    "upvote_ratio": 0.79,
    "ups": 26,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "frederickvanbrabant.com",
    "suggested_sort": null
  },
  {
    "id": "1jixx9a",
    "title": "Mastering API Changes and Rollbacks Without Breaking Trust",
    "author": "ZuploAdrian",
    "author_fullname": "t2_m2pvjtxf",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://zuplo.com/blog/2025/03/11/api-changes-and-rollbacks",
    "permalink": "https://www.reddit.com/r/programming/comments/1jixx9a/mastering_api_changes_and_rollbacks_without/",
    "created_utc": 1742840902,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 3,
    "num_comments": 2,
    "upvote_ratio": 0.72,
    "ups": 3,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "zuplo.com",
    "suggested_sort": null
  },
  {
    "id": "1jjct7s",
    "title": "HIRING JR and SR back-end devs for AI startup",
    "author": "Ngce",
    "author_fullname": "t2_r3e59",
    "selftext": "\nBack-end Developer\n\nWe’re hiring talented Back-End Developers to join MyAly.ai, a SaaS platform transforming the 3D printing industry with machine learning, agentic teams, and innovative automation.\n* Fully remote role with a range up to $15,000/month, based on your experience and value delivered\n* Fast-paced startup environment tackling sustainability and supply chain optimization for a greener future\n* For exceptional developers, we offer SAFE (Simple Agreement for Future Equity) in a company currently valued at ~$3-6M, with a goal of reaching $1B+ by 2029\nWhat You’ll Get:\nA chance to work on cutting-edge tech involving machine learning and agentic teams\n* Daily challenges that test and grow your technical skills\n* Collaboration with a 15-person team of experts in data science, systems engineering, and product development\n* The opportunity to redefine 3D printing and contribute to eco-sustainability\nWhat You’ll Do:You’ll help build agentic teams to populate and manage databases, leveraging workflow automation tools (like n8n) and cloud-based server systems (like MCP servers). Don’t worry if you haven’t used these specific tools before—we’re looking for strong foundational skills in:\n* Programming languages (e.g., Python, JavaScript)\n* API development and integration\n* Database management (SQL, NoSQL)\n* Cloud services or server management\nWe value adaptability, problem-solving, and a passion for learning over experience with our exact tech stack. If you thrive in innovative, high-energy settings, this is for you.\nPhased Hiring Process:\n* Phase 1 (Until April 2): We’ll schedule Zoom meetings for a face-to-face discussion to assess mutual fit.\n* Phase 2 (Ongoing): You’ll complete a 2–5 day unpaid project to showcase your skills and competency.\nFinal Offer: Full-time role with a pre-discussed salary ($500–$15K/month) and, for top performers, the chance to earn SAFE equity.\nWe’re building the future of the 3D printing industry with machine learning at its core. This is your chance to create something extraordinary that users will rely on every day.\nIF YOU WANT A SLOW-PACED, EASY JOB, LOOK ELSEWHERE. WE ARE HERE TO CHANGE THE WORLD.\n\nPlease visit the link below to fill out the application.\nThank you for your interest!\nhttps://forms.gle/Cecq7ar9VTGrgAZb8\n",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Back-end Developer</p>\n\n<p>We’re hiring talented Back-End Developers to join MyAly.ai, a SaaS platform transforming the 3D printing industry with machine learning, agentic teams, and innovative automation.\n* Fully remote role with a range up to $15,000/month, based on your experience and value delivered\n* Fast-paced startup environment tackling sustainability and supply chain optimization for a greener future\n* For exceptional developers, we offer SAFE (Simple Agreement for Future Equity) in a company currently valued at ~$3-6M, with a goal of reaching $1B+ by 2029\nWhat You’ll Get:\nA chance to work on cutting-edge tech involving machine learning and agentic teams\n* Daily challenges that test and grow your technical skills\n* Collaboration with a 15-person team of experts in data science, systems engineering, and product development\n* The opportunity to redefine 3D printing and contribute to eco-sustainability\nWhat You’ll Do:You’ll help build agentic teams to populate and manage databases, leveraging workflow automation tools (like n8n) and cloud-based server systems (like MCP servers). Don’t worry if you haven’t used these specific tools before—we’re looking for strong foundational skills in:\n* Programming languages (e.g., Python, JavaScript)\n* API development and integration\n* Database management (SQL, NoSQL)\n* Cloud services or server management\nWe value adaptability, problem-solving, and a passion for learning over experience with our exact tech stack. If you thrive in innovative, high-energy settings, this is for you.\nPhased Hiring Process:\n* Phase 1 (Until April 2): We’ll schedule Zoom meetings for a face-to-face discussion to assess mutual fit.\n* Phase 2 (Ongoing): You’ll complete a 2–5 day unpaid project to showcase your skills and competency.\nFinal Offer: Full-time role with a pre-discussed salary ($500–$15K/month) and, for top performers, the chance to earn SAFE equity.\nWe’re building the future of the 3D printing industry with machine learning at its core. This is your chance to create something extraordinary that users will rely on every day.\nIF YOU WANT A SLOW-PACED, EASY JOB, LOOK ELSEWHERE. WE ARE HERE TO CHANGE THE WORLD.</p>\n\n<p>Please visit the link below to fill out the application.\nThank you for your interest!\n<a href=\"https://forms.gle/Cecq7ar9VTGrgAZb8\">https://forms.gle/Cecq7ar9VTGrgAZb8</a></p>\n</div><!-- SC_ON -->",
    "body": "\nBack-end Developer\n\nWe’re hiring talented Back-End Developers to join MyAly.ai, a SaaS platform transforming the 3D printing industry with machine learning, agentic teams, and innovative automation.\n* Fully remote role with a range up to $15,000/month, based on your experience and value delivered\n* Fast-paced startup environment tackling sustainability and supply chain optimization for a greener future\n* For exceptional developers, we offer SAFE (Simple Agreement for Future Equity) in a company currently valued at ~$3-6M, with a goal of reaching $1B+ by 2029\nWhat You’ll Get:\nA chance to work on cutting-edge tech involving machine learning and agentic teams\n* Daily challenges that test and grow your technical skills\n* Collaboration with a 15-person team of experts in data science, systems engineering, and product development\n* The opportunity to redefine 3D printing and contribute to eco-sustainability\nWhat You’ll Do:You’ll help build agentic teams to populate and manage databases, leveraging workflow automation tools (like n8n) and cloud-based server systems (like MCP servers). Don’t worry if you haven’t used these specific tools before—we’re looking for strong foundational skills in:\n* Programming languages (e.g., Python, JavaScript)\n* API development and integration\n* Database management (SQL, NoSQL)\n* Cloud services or server management\nWe value adaptability, problem-solving, and a passion for learning over experience with our exact tech stack. If you thrive in innovative, high-energy settings, this is for you.\nPhased Hiring Process:\n* Phase 1 (Until April 2): We’ll schedule Zoom meetings for a face-to-face discussion to assess mutual fit.\n* Phase 2 (Ongoing): You’ll complete a 2–5 day unpaid project to showcase your skills and competency.\nFinal Offer: Full-time role with a pre-discussed salary ($500–$15K/month) and, for top performers, the chance to earn SAFE equity.\nWe’re building the future of the 3D printing industry with machine learning at its core. This is your chance to create something extraordinary that users will rely on every day.\nIF YOU WANT A SLOW-PACED, EASY JOB, LOOK ELSEWHERE. WE ARE HERE TO CHANGE THE WORLD.\n\nPlease visit the link below to fill out the application.\nThank you for your interest!\nhttps://forms.gle/Cecq7ar9VTGrgAZb8\n",
    "url": "https://forms.gle/Cecq7ar9VTGrgAZb8",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjct7s/hiring_jr_and_sr_backend_devs_for_ai_startup/",
    "created_utc": 1742882959,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 5,
    "upvote_ratio": 0.17,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "forms.gle",
    "suggested_sort": null
  },
  {
    "id": "1jj5n5e",
    "title": "Noémi Ványi: Only Fix Problems That Are Actually Problems",
    "author": "robbyrussell",
    "author_fullname": "t2_l6up",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://maintainable.fm/episodes/noemi-vanyi-only-fix-problems-that-are-actually-problems",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj5n5e/noémi_ványi_only_fix_problems_that_are_actually/",
    "created_utc": 1742859598,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 0,
    "upvote_ratio": 0.5,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "maintainable.fm",
    "suggested_sort": null
  },
  {
    "id": "1jiq64d",
    "title": "Identity Tokens Explained: Best Practices for Better Access Control",
    "author": "Permit_io",
    "author_fullname": "t2_ij9mevpn",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.permit.io/blog/identity-tokens-best-practices",
    "permalink": "https://www.reddit.com/r/programming/comments/1jiq64d/identity_tokens_explained_best_practices_for/",
    "created_utc": 1742821486,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 8,
    "num_comments": 0,
    "upvote_ratio": 0.76,
    "ups": 8,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "permit.io",
    "suggested_sort": null
  },
  {
    "id": "1jip6yo",
    "title": "An Illustrated Guide to CIDR",
    "author": "egonSchiele",
    "author_fullname": "t2_39ahw",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.ducktyped.org/p/the-cidr-house-rules",
    "permalink": "https://www.reddit.com/r/programming/comments/1jip6yo/an_illustrated_guide_to_cidr/",
    "created_utc": 1742818431,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 5,
    "num_comments": 1,
    "upvote_ratio": 0.68,
    "ups": 5,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "ducktyped.org",
    "suggested_sort": null
  },
  {
    "id": "1jizayn",
    "title": "Contract Testing on Examples",
    "author": "sarvendev",
    "author_fullname": "t2_1z99lx1k",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://sarvendev.com/posts/contract-testing-on-examples/",
    "permalink": "https://www.reddit.com/r/programming/comments/1jizayn/contract_testing_on_examples/",
    "created_utc": 1742844136,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 1,
    "num_comments": 0,
    "upvote_ratio": 1,
    "ups": 1,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "sarvendev.com",
    "suggested_sort": null
  },
  {
    "id": "1jiyzt5",
    "title": "LZAV 4.10: Increased decompression speed, strict C++ compliance and portability (not meaning adherence to specific language guidelines). Fast In-Memory Data Compression Algorithm (inline C/C++) 460+MB/s compress, 2800+MB/s decompress, ratio% better than LZ4, Snappy, and Zstd@-1",
    "author": "avaneev",
    "author_fullname": "t2_8fi4d6se",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://github.com/avaneev/lzav",
    "permalink": "https://www.reddit.com/r/programming/comments/1jiyzt5/lzav_410_increased_decompression_speed_strict_c/",
    "created_utc": 1742843391,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 1,
    "num_comments": 2,
    "upvote_ratio": 0.67,
    "ups": 1,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jj39mh",
    "title": "⚡ Latency Numbers Every Programmer Should Know",
    "author": "mdzeya",
    "author_fullname": "t2_7ayrxwtj",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://medium.com/@mohammadzeyaahmad/latency-numbers-every-programmer-should-know-87301800c605",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj39mh/latency_numbers_every_programmer_should_know/",
    "created_utc": 1742853597,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 18,
    "upvote_ratio": 0.49,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "medium.com",
    "suggested_sort": null
  },
  {
    "id": "1jjae1u",
    "title": "TIL You Can Export ChatGPT Conversations to Markdown or PDF — No Extension Needed",
    "author": "RashidAzarang",
    "author_fullname": "t2_iuv7blzyk",
    "selftext": "I found it frustrating to save ChatGPT conversations cleanly—especially long threads with formatting and code. So I built a simple tool that lets you export any ChatGPT convo into **Markdown** or **PDF**, right from your browser console.\n\n\n\n*No Chrome extension. No installs. Just copy + paste.*\n\n\n\n**📋 Supports:**\n\n• Code blocks\n\n• Bold/italics\n\n• Clean formatting\n\n• Images (as placeholders)\n\n\n\n**💡 How it works:**\n\n1. Open any ChatGPT thread\n\n2. Right-click → Inspect → Console\n\n3. Paste the snippet from the GitHub repo\n\n4. Hit Enter — and boom 💥— instant export\n\n\n\n🔗 Tool: [https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf](https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf)\n\n🔗 GitHub: [https://github.com/rashidazarang/chatgpt-chat-exporter](https://github.com/rashidazarang/chatgpt-chat-exporter)\n\n\n\nHope it helps others who use ChatGPT for research, content creation, or just want to keep a backup. Happy exporting!",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I found it frustrating to save ChatGPT conversations cleanly—especially long threads with formatting and code. So I built a simple tool that lets you export any ChatGPT convo into <strong>Markdown</strong> or <strong>PDF</strong>, right from your browser console.</p>\n\n<p><em>No Chrome extension. No installs. Just copy + paste.</em></p>\n\n<p><strong>📋 Supports:</strong></p>\n\n<p>• Code blocks</p>\n\n<p>• Bold/italics</p>\n\n<p>• Clean formatting</p>\n\n<p>• Images (as placeholders)</p>\n\n<p><strong>💡 How it works:</strong></p>\n\n<ol>\n<li><p>Open any ChatGPT thread</p></li>\n<li><p>Right-click → Inspect → Console</p></li>\n<li><p>Paste the snippet from the GitHub repo</p></li>\n<li><p>Hit Enter — and boom 💥— instant export</p></li>\n</ol>\n\n<p>🔗 Tool: <a href=\"https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf\">https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf</a></p>\n\n<p>🔗 GitHub: <a href=\"https://github.com/rashidazarang/chatgpt-chat-exporter\">https://github.com/rashidazarang/chatgpt-chat-exporter</a></p>\n\n<p>Hope it helps others who use ChatGPT for research, content creation, or just want to keep a backup. Happy exporting!</p>\n</div><!-- SC_ON -->",
    "body": "I found it frustrating to save ChatGPT conversations cleanly—especially long threads with formatting and code. So I built a simple tool that lets you export any ChatGPT convo into **Markdown** or **PDF**, right from your browser console.\n\n\n\n*No Chrome extension. No installs. Just copy + paste.*\n\n\n\n**📋 Supports:**\n\n• Code blocks\n\n• Bold/italics\n\n• Clean formatting\n\n• Images (as placeholders)\n\n\n\n**💡 How it works:**\n\n1. Open any ChatGPT thread\n\n2. Right-click → Inspect → Console\n\n3. Paste the snippet from the GitHub repo\n\n4. Hit Enter — and boom 💥— instant export\n\n\n\n🔗 Tool: [https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf](https://rashidazarang.com/c/export-your-chatgpt-conversations-to-markdown-pdf)\n\n🔗 GitHub: [https://github.com/rashidazarang/chatgpt-chat-exporter](https://github.com/rashidazarang/chatgpt-chat-exporter)\n\n\n\nHope it helps others who use ChatGPT for research, content creation, or just want to keep a backup. Happy exporting!",
    "url": "https://github.com/rashidazarang/chatgpt-chat-exporter",
    "permalink": "https://www.reddit.com/r/programming/comments/1jjae1u/til_you_can_export_chatgpt_conversations_to/",
    "created_utc": 1742873775,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 8,
    "upvote_ratio": 0.23,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "github.com",
    "suggested_sort": null
  },
  {
    "id": "1jj7qf5",
    "title": "Diferencias entre @Component, @Controller, @Service y @Repository en Spring Boot",
    "author": "emanuelpeg",
    "author_fullname": "t2_4015onhj",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://emanuelpeg.blogspot.com/2025/03/diferencias-entre-component-controller.html",
    "permalink": "https://www.reddit.com/r/programming/comments/1jj7qf5/diferencias_entre_component_controller_service_y/",
    "created_utc": 1742865503,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 0,
    "num_comments": 0,
    "upvote_ratio": 0.14,
    "ups": 0,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": null,
    "domain": "emanuelpeg.blogspot.com",
    "suggested_sort": null
  },
  {
    "id": "1ji0u2g",
    "title": "Make actual PlayStation 1 games in Unity (running on original vintage hardware)",
    "author": "r_retrohacking_mod2",
    "author_fullname": "t2_1q1jbnhq",
    "selftext": "",
    "selftext_html": "",
    "body": "",
    "url": "https://www.youtube.com/watch?v=AAjsgLyFwH0",
    "permalink": "https://www.reddit.com/r/programming/comments/1ji0u2g/make_actual_playstation_1_games_in_unity_running/",
    "thumbnail": "image",
    "created_utc": 1742741039,
    "subreddit": "programming",
    "subreddit_id": "t5_2fwo",
    "subreddit_type": "public",
    "score": 79,
    "num_comments": 15,
    "upvote_ratio": 0.78,
    "ups": 79,
    "downs": 0,
    "is_original_content": false,
    "is_self": false,
    "is_video": false,
    "is_gallery": false,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "archived": false,
    "locked": false,
    "link_flair_text": null,
    "link_flair_css_class": null,
    "gilded": 0,
    "total_awards_received": 0,
    "media": {
      "oembed": {
        "provider_url": "https://www.youtube.com/",
        "title": "Make actual PlayStation 1 games in Unity",
        "html": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AAjsgLyFwH0?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Make actual PlayStation 1 games in Unity\"></iframe>",
        "thumbnail_width": 480,
        "height": 200,
        "width": 356,
        "version": "1.0",
        "author_name": "Bandwidth",
        "provider_name": "YouTube",
        "thumbnail_url": "https://i.ytimg.com/vi/AAjsgLyFwH0/hqdefault.jpg",
        "type": "video",
        "thumbnail_height": 360,
        "author_url": "https://www.youtube.com/@Bandwidth_ytb"
      },
      "type": "youtube.com"
    },
    "domain": "youtube.com",
    "suggested_sort": null,
    "crosspost_parent_list": [
      {
        "approved_at_utc": null,
        "subreddit": {
          "display_name": "retrogamedev"
        },
        "selftext": "",
        "user_reports": [],
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Make actual PlayStation 1 games in Unity (running on original vintage hardware)",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/retrogamedev",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": null,
        "downs": 0,
        "thumbnail_height": 105,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1ji0txh",
        "quarantine": false,
        "link_flair_text_color": "dark",
        "upvote_ratio": 0.96,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 96,
        "total_awards_received": 0,
        "media_embed": {
          "content": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AAjsgLyFwH0?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Make actual PlayStation 1 games in Unity\"></iframe>",
          "width": 356,
          "scrolling": false,
          "height": 200
        },
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "author_fullname": "t2_1q1jbnhq",
        "secure_media": {
          "oembed": {
            "provider_url": "https://www.youtube.com/",
            "title": "Make actual PlayStation 1 games in Unity",
            "html": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AAjsgLyFwH0?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Make actual PlayStation 1 games in Unity\"></iframe>",
            "thumbnail_width": 480,
            "height": 200,
            "width": 356,
            "version": "1.0",
            "author_name": "Bandwidth",
            "provider_name": "YouTube",
            "thumbnail_url": "https://i.ytimg.com/vi/AAjsgLyFwH0/hqdefault.jpg",
            "type": "video",
            "thumbnail_height": 360,
            "author_url": "https://www.youtube.com/@Bandwidth_ytb"
          },
          "type": "youtube.com"
        },
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {
          "content": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AAjsgLyFwH0?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Make actual PlayStation 1 games in Unity\"></iframe>",
          "width": 356,
          "scrolling": false,
          "media_domain_url": "https://www.redditmedia.com/mediaembed/1ji0txh",
          "height": 200
        },
        "link_flair_text": null,
        "can_mod_post": false,
        "score": 96,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "image",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "rich:video",
        "content_categories": null,
        "is_self": false,
        "mod_note": null,
        "created": 1742741027,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "youtube.com",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://www.youtube.com/watch?v=AAjsgLyFwH0",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
          "images": [
            {
              "source": {
                "url": "https://external-preview.redd.it/rsyc5UVE5cBNiuu-aE2gc1vqBzUx-3eCl0FwISPCTAo.jpg?auto=webp&s=b9480eea9f9f956538282cc91fa45a5bd9c0bc90",
                "width": 480,
                "height": 360
              },
              "resolutions": [
                {
                  "url": "https://external-preview.redd.it/rsyc5UVE5cBNiuu-aE2gc1vqBzUx-3eCl0FwISPCTAo.jpg?width=108&crop=smart&auto=webp&s=98bdaeef9de544c80e587cfa27ce870787f993cc",
                  "width": 108,
                  "height": 81
                },
                {
                  "url": "https://external-preview.redd.it/rsyc5UVE5cBNiuu-aE2gc1vqBzUx-3eCl0FwISPCTAo.jpg?width=216&crop=smart&auto=webp&s=7747c614f6d13769a1a12ab19133df0e575e9d4e",
                  "width": 216,
                  "height": 162
                },
                {
                  "url": "https://external-preview.redd.it/rsyc5UVE5cBNiuu-aE2gc1vqBzUx-3eCl0FwISPCTAo.jpg?width=320&crop=smart&auto=webp&s=f365c7ee191e2e09b97654336ac19bfc1213c519",
                  "width": 320,
                  "height": 240
                }
              ],
              "variants": {},
              "id": "wAySFzNfd2Ii4HumIK2ceRUrHjzLnSeW1fbUesNSY1M"
            }
          ],
          "enabled": false
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_2zoxu",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "",
        "id": "1ji0txh",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": {
          "name": "r_retrohacking_mod2"
        },
        "discussion_type": null,
        "num_comments": 14,
        "send_replies": true,
        "media": {
          "oembed": {
            "provider_url": "https://www.youtube.com/",
            "title": "Make actual PlayStation 1 games in Unity",
            "html": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/AAjsgLyFwH0?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Make actual PlayStation 1 games in Unity\"></iframe>",
            "thumbnail_width": 480,
            "height": 200,
            "width": 356,
            "version": "1.0",
            "author_name": "Bandwidth",
            "provider_name": "YouTube",
            "thumbnail_url": "https://i.ytimg.com/vi/AAjsgLyFwH0/hqdefault.jpg",
            "type": "video",
            "thumbnail_height": 360,
            "author_url": "https://www.youtube.com/@Bandwidth_ytb"
          },
          "type": "youtube.com"
        },
        "contest_mode": false,
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/retrogamedev/comments/1ji0txh/make_actual_playstation_1_games_in_unity_running/",
        "stickied": false,
        "url": "https://www.youtube.com/watch?v=AAjsgLyFwH0",
        "subreddit_subscribers": 8093,
        "created_utc": 1742741027,
        "num_crossposts": 4,
        "mod_reports": [],
        "is_video": false
      }
    ]
  }
]